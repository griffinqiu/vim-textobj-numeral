*textobj-numeral.txt*	Text objects for numbers.	    *textobj-numeral*

Version: 0.0.1
Author : tkhren <m.tkhren@gmail.com>
License: So-called MIT/X license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS					    *textobj-numeral-contents*

INTRODUCTION			|textobj-numeral-introduction|
INTERFACE			|textobj-numeral-interface|
KEY MAPPINGS			|textobj-numeral-key-mappings|
CUSTOMIZING			|textobj-numeral-customizing|
EXAMPLE				|textobj-numeral-example|
CHANGELOG			|textobj-numeral-changelog|


==============================================================================
INTRODUCTION					*textobj-numeral-introduction*

textobj-numeral is a Vim plugin to provide text objects to select numbers.

Requirements:
- |textobj-user| by kana
  <http://www.vim.org/scripts/script.php?script_id=2100>
  <https://github.com/kana/vim-textobj-user>

Latest version:
https://github.com/tkhren/vim-textobj-numeral

==============================================================================
INTERFACE					*textobj-numeral-interface*

------------------------------------------------------------------------------
KEY MAPPINGS					*textobj-numeral-key-mappings*

These key mappings are defined in Visual mode and Operator-pending mode.

<Plug>(textobj-numeral-a)			*<Plug>(textobj-numeral-a)*
			Select the decimal number in various notation.
			See also |g:textobj_numeral_a_pattern|
			Example)
				1024		integer
				3.1415		floating number
				-100		signed number
				6.02e24		exponential number

<Plug>(textobj-numeral-i)			*<Plug>(textobj-numeral-i)*
			Select the integer
			See also |g:textobj_numeral_i_pattern|
			Example)
				1024		integer

<Plug>(textobj-numeral-digit-a)			*<Plug>(textobj-numeral-digit-a)*
			Select the integer with sign.
			See also |g:textobj_numeral_digit_a_pattern|
			Example)
				1024		integer
				-250		signed integer

<Plug>(textobj-numeral-digit-i)			*<Plug>(textobj-numeral-digit-i)*
			Select the integer
			See also |g:textobj_numeral_digit_i_pattern|
			Example)
				1024		integer

<Plug>(textobj-numeral-float-a)			*<Plug>(textobj-numeral-float-a)*
			Select the floating number with sign.
			See also |g:textobj_numeral_float_a_pattern|
			Example)
				1024		integer
				3.1415		floating number
				-2.7		signed number

<Plug>(textobj-numeral-float-i)			*<Plug>(textobj-numeral-float-i)*
			Select the floating number
			See also |g:textobj_numeral_float_i_pattern|
			Example)
				1024		integer
				3.1415		floating number

<Plug>(textobj-numeral-hex-a)			*<Plug>(textobj-numeral-hex-a)*
			Select the hexadecimal number with prefix.
			See also |g:textobj_numeral_hex_a_pattern|
			Example)
				f1e2d3		hexadecimal digits
				0xffff		hexadecimal with prefix
				#ffffff		ColorCode-like notation

<Plug>(textobj-numeral-hex-i)			*<Plug>(textobj-numeral-hex-i)*
			Select the hexadecimal number with no prefix
			See also |g:textobj_numeral_hex_i_pattern|
			Example)
				f1e2d3		hexadecimal digits

These key mappings are defined in Normal mode.

<Plug>(textobj-numeral-n)			*<Plug>(textobj-numeral-n)*
<Plug>(textobj-numeral-p)			*<Plug>(textobj-numeral-p)*
<Plug>(textobj-numeral-N)			*<Plug>(textobj-numeral-N)*
<Plug>(textobj-numeral-P)			*<Plug>(textobj-numeral-P)*
<Plug>(textobj-numeral-digit-n)			*<Plug>(textobj-numeral-digit-n)*
<Plug>(textobj-numeral-digit-p)			*<Plug>(textobj-numeral-digit-p)*
<Plug>(textobj-numeral-digit-N)			*<Plug>(textobj-numeral-digit-N)*
<Plug>(textobj-numeral-digit-P)			*<Plug>(textobj-numeral-digit-P)*
<Plug>(textobj-numeral-float-n)			*<Plug>(textobj-numeral-float-n)*
<Plug>(textobj-numeral-float-p)			*<Plug>(textobj-numeral-float-p)*
<Plug>(textobj-numeral-float-N)			*<Plug>(textobj-numeral-float-N)*
<Plug>(textobj-numeral-float-P)			*<Plug>(textobj-numeral-float-P)*
<Plug>(textobj-numeral-hex-n)			*<Plug>(textobj-numeral-hex-n)*
<Plug>(textobj-numeral-hex-p)			*<Plug>(textobj-numeral-hex-p)*
<Plug>(textobj-numeral-hex-N)			*<Plug>(textobj-numeral-hex-N)*
<Plug>(textobj-numeral-hex-P)			*<Plug>(textobj-numeral-hex-P)*
			Move to the nearest text object.
			For `n` or `N`, search forward. 
			For `p` or `P`, search backward. 

			For `n` or `p`, use the i_pattern
			For `N` or `P`, use the a_pattern

==============================================================================
CUSTOMIZING					*textobj-numeral-customizing*

				     *g:textobj_numeral_no_default_key_mappings*
					     *:TextobjNumeralDefaultKeyMappings*
This plugin will define the following key mappings in Visual mode and
Operator-pending mode automatically.  If you don't want these key mappings,
define |g:textobj_numeral_no_default_key_mappings| before this plugin is loaded
(e.g. in your |vimrc|).  You can also use |:TextobjNumeralDefaultKeyMappings|
to redefine these key mappings.  This command doesn't override existing {lhs}s
unless [!] is given. See the |textobj-user| documentation for more info.

	{lhs}	{rhs}				~
	-----	---------------------------	~
	an	<Plug>(textobj-numeral-a)
	in	<Plug>(textobj-numeral-i)

	ad	<Plug>(textobj-numeral-digit-a)
	id	<Plug>(textobj-numeral-digit-i)

	af	<Plug>(textobj-numeral-float-a)
	if	<Plug>(textobj-numeral-float-i)

	ax	<Plug>(textobj-numeral-hex-a)
	ix	<Plug>(textobj-numeral-hex-i)

	gnn	<Plug>(textobj-numeral-n)
	gpn	<Plug>(textobj-numeral-p)
	gNn	<Plug>(textobj-numeral-N)
	gPn	<Plug>(textobj-numeral-P)

	gnd	<Plug>(textobj-numeral-digit-n)
	gpd	<Plug>(textobj-numeral-digit-p)
	gNd	<Plug>(textobj-numeral-digit-N)
	gPd	<Plug>(textobj-numeral-digit-P)

	gnf	<Plug>(textobj-numeral-float-n)
	gpf	<Plug>(textobj-numeral-float-p)
	gNf	<Plug>(textobj-numeral-float-N)
	gPf	<Plug>(textobj-numeral-float-P)

	gnx	<Plug>(textobj-numeral-hex-n)
	gpx	<Plug>(textobj-numeral-hex-p)
	gNx	<Plug>(textobj-numeral-hex-N)
	gPx	<Plug>(textobj-numeral-hex-P)


g:textobj_numeral_strict_mode			*g:textobj_numeral_strict_mode*

					(Default: 0)
		In the strict mode, a text object under the cursor is only
		accepted. When a text object under the cursor does not exist,
		you will enter the Visual mode at the current position.
		If this variable is 0, you will select the nearest
		text object.


The pattern for the each text objects is defined by the following variables.
You can modify the regular expressions to suit your specific needs.

g:textobj_numeral_a_pattern			*g:textobj_numeral_a_pattern*

		(Default: "[-+]\?\d\+\%(\.\d\+\)\?\%([eE][-+]\?\d\+\)\?")

g:textobj_numeral_i_pattern			*g:textobj_numeral_i_pattern*

					(Default: "\d\+")

g:textobj_numeral_digit_a_pattern	    *g:textobj_numeral_digit_a_pattern*

					(Default: "[-+]\?\d\+")

g:textobj_numeral_digit_i_pattern	    *g:textobj_numeral_digit_i_pattern*

					(Default: "\d\+")

g:textobj_numeral_float_a_pattern	    *g:textobj_numeral_float_a_pattern*

					(Default: "[-+]\?\d\+\%(\.\d\+\)\?")

g:textobj_numeral_float_i_pattern	    *g:textobj_numeral_float_i_pattern*

					(Default: "\d\+\%(\.\d\+\)\?")

g:textobj_numeral_hex_a_pattern		    *g:textobj_numeral_hex_a_pattern*

					(Default: "\<\%(0x\|#\)\?\x\+\>")

g:textobj_numeral_hex_i_pattern		    *g:textobj_numeral_hex_i_pattern*

					(Default: "\x\+\>")

==============================================================================
EXAMPLE						    *textobj-numeral-example*

There is a useful application to input sequential numbers.
Write the following code in your .vimrc
>
	set nrformats-=octal

	function! Increment(motion, step)
	    let inc_key = a:step > 0 ? "\<C-a>" : "\<C-x>"
	    let @z = '"zyad' . a:motion . 'vad"zp'. abs(a:step) . inc_key
	    return '@z'
	endfunction

	nmap <expr> + Increment('j', 1)
	nmap <expr> - Increment('j', -1)
	nmap <expr> ) Increment('gNd', 1)
	nmap <expr> ( Increment('gNd', -1)
<
Move cursor to the top of '00', and type `++++++++++` or `10+`
>
	aaa00ccc	->	aaa00ccc
	aaa00ccc	->	aaa01ccc
	aaa00ccc	->	aaa02ccc
	aaa00ccc	->	aaa03ccc
	aaa00ccc	->	aaa04ccc
	aaa00ccc	->	aaa05ccc
	aaa00ccc	->	aaa06ccc
	aaa00ccc	->	aaa07ccc
	aaa00ccc	->	aaa08ccc
	aaa00ccc	->	aaa09ccc
	aaa00ccc	->	aaa10ccc
<
Move cursor to the first '0', and type `)` or `10)`
>
	[0,0,0,0,0,0,0,0,0,0,0]   ->   [0,1,2,3,4,5,6,7,8,9,10]
<
==============================================================================
CHANGELOG					    *textobj-numeral-changelog*

0.1.0	2014-2-26
	- Some bugfixes
	- Add the strict mode
	- Add the move-x-functions

0.0.1	2014-2-18
	- Initial version.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:
